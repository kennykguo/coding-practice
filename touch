"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

from copy import copy

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        
        # loop until head becomes null, to know we have no more nodes to return
        dummy = Node(0, None, None)
        cur = dummy
        old_head = head
        old_to_new = {}

        
        while head:
            # create deep copy node
            new_node = Node(head.val, None, None)

            print(head.val)
            if head.random:
                print(head.random.val)

            # add as a dictionary entry
            old_to_new[head] = new_node

            # assign next pointer of current node
            cur.next = new_node

            # advance the head in old list
            head = head.next

            # advance the current pointer in deep copied list
            cur = cur.next
        
        cur = dummy.next
        head = old_head

        # fill in the random pointers
        while head:
            if head.random:
                cur.random = old_to_new[head.random]
            else:
                cur.random = None
            cur = cur.next
            head = head.next
        
        return dummy.next
